[GeneratedCode("NSwag", "{{ ToolchainVersion }}")]
{{ ClientClassAccessModifier }} partial class {{ Class }} {% if HasBaseType %}: {% endif %}{% if HasBaseClass %}{{ BaseClass }}{% if GenerateClientInterfaces %}, {% endif %}{% endif %}{% if GenerateClientInterfaces %}I{{ Class }}{% endif %}
{
{% if UseBaseUrl and GenerateBaseUrlProperty -%}
    private String _baseUrl = "{{ BaseUrl }}";
{% endif -%}
{% if InjectHttpClient -%}
    private {{ HttpClientType }} _httpClient;
{% endif -%}
    private Lazy<JsonSerializerSettings> _settings;

{% if HasConfigurationClass -%}
    public {{ Class }}({{ ConfigurationClass }} configuration{% if InjectHttpClient %}, {{ HttpClientType }} httpClient{% endif %}) : base(configuration)
    {
{%     if InjectHttpClient -%}
        _httpClient = httpClient; 
{%     endif -%}
{% elseif UseBaseUrl and HasBaseUrl == false -%}
    public {{ Class }}(String baseUrl{% if InjectHttpClient -%}, {{ HttpClientType }} httpClient{% endif %})
    {
        BaseUrl = baseUrl; 
{%     if InjectHttpClient -%}
        _httpClient = httpClient; 
{%     endif -%}
{% elseif InjectHttpClient -%}
    public {{ Class }}({{ HttpClientType }} httpClient)
    {
        _httpClient = httpClient; 
{% else -%}
    public {{ Class }}()
    {
{% endif -%}
        _settings = new Lazy<JsonSerializerSettings>(() => 
        {
            var settings = {{ JsonSerializerParameterCode }};
{% if SerializeTypeInformation -%}
            settings.TypeNameHandling = TypeNameHandling.Auto;
{% endif -%}
            UpdateJsonSerializerSettings(settings);
            return settings;
        });
    }

{% if UseBaseUrl and GenerateBaseUrlProperty -%}
    public String BaseUrl 
    {
        get { return _baseUrl; }
        set { _baseUrl = value; }
    }

{% endif -%}
    {% if ExposeJsonSerializerSettings %}public{% else %}protected{% endif %} JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

{% if GenerateUpdateJsonSerializerSettingsMethod -%}
    partial void UpdateJsonSerializerSettings(JsonSerializerSettings settings);
{% endif -%}
    partial void PrepareRequest({{ HttpClientType }} client, HttpRequestMessage request, String url);
    partial void PrepareRequest({{ HttpClientType }} client, HttpRequestMessage request, StringBuilder urlBuilder);
    partial void ProcessResponse({{ HttpClientType }} client, HttpResponseMessage response);

	protected virtual async Task<(T,String)> ReadObjectResponseAsync<T>( HttpResponseMessage response, IReadOnlyDictionary<String,IEnumerable<String>> responseHeadersAsDictionary )
	{
#if !DEBUG
		String objectBodyAsString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
		try
		{
			T typedBody = JsonConvert.DeserializeObject<T>( objectBodyAsString, this.JsonSerializerSettings );
			return ( typedBody, objectBodyAsString );
		}
		catch ( JsonException ex )
		{
			throw new ResponseDeserializationException("Could not deserialize the response body.", reason: ClientExceptionReason.JsonDeserializationError, (Int32)response.StatusCode, objectBodyAsString, responseHeadersAsDictionary, ex);
		}
#else
		try
		{
			using( Stream responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false) )
			using( StreamReader streamReader = new StreamReader( responseStream ) )
			using( JsonTextReader jsonTextReader = new JsonTextReader( streamReader ) )
			{
				JsonSerializer serializer = JsonSerializer.Create( this.JsonSerializerSettings );

				T responseBody = serializer.Deserialize<T>( jsonTextReader );
				return ( responseBody, null );
			}
		}
		catch( JsonException ex )
		{
			throw new ResponseDeserializationException( "Could not deserialize the response body as " + typeof(T).FullName + ".", reason: ClientExceptionReason.JsonDeserializationError, (Int32)response.StatusCode, null, responseHeadersAsDictionary, ex );
		}
#endif
	}

{% for operation in Operations -%}
{%     if GenerateOptionalParameters == false -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }} {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
    {
        return {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}CancellationToken.None);
    }

{%     endif -%}
{%     if GenerateSyncMethods -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }} {{ operation.SyncResultType }} {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
    {
        {% if operation.HasResult %}return {% endif %}Task.Run(async () => await {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}CancellationToken.None)).GetAwaiter().GetResult();
    }

{%     endif -%}
    {% template Client.Method.Documentation %}
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    {{ operation.MethodAccessModifier }} async {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}, {% endfor %}CancellationToken cancellationToken{% if GenerateOptionalParameters %} = default(CancellationToken){% endif %})
    {
{%     for parameter in operation.PathParameters -%}
{%         if parameter.IsNullable == false and parameter.IsRequired -%}
        if ({{ parameter.VariableName }} == null) throw new ArgumentNullException("{{ parameter.VariableName }}");

{%         endif -%}
{%     endfor -%}
{%     for parameter in operation.QueryParameters -%}
{%         if parameter.IsNullable == false and parameter.IsRequired -%}
        if ({{ parameter.VariableName }} == null) throw new ArgumentNullException("{{ parameter.VariableName }}");

{%         endif -%}
{%     endfor -%}
        var urlBuilder_ = new StringBuilder();
        urlBuilder_.Append({% if UseBaseUrl %}BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{% else %}"{% endif %}{{ operation.Path }}{% if operation.HasQueryParameters %}?{% endif %}");
{%     for parameter in operation.PathParameters -%}
{%         if parameter.IsOptional -%}
        if ({{ parameter.VariableName }} != null)
            {% template Client.Class.PathParameter %}
        else
            urlBuilder_.Replace("/{{ "{" }}{{ parameter.Name }}}", String.Empty);
{%         else -%}
        {% template Client.Class.PathParameter %}
{%         endif -%}
{%     endfor -%}
{%     for parameter in operation.QueryParameters -%}
{%         if parameter.IsOptional -%}
        if ({{ parameter.VariableName }} != null) 
        {
            {% template Client.Class.QueryParameter %}
        }
{%         else -%}
        {% template Client.Class.QueryParameter %}
{%         endif -%}
{%     endfor -%}
{%     if operation.HasQueryParameters -%}
        urlBuilder_.Length--;
{%     endif -%}

{%     if InjectHttpClient -%}
        var client_ = _httpClient;
{%     elseif UseHttpClientCreationMethod -%}
        var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
{%     else -%}
        var client_ = new {{ HttpClientType }}();
{%     endif -%}
{%     if InjectHttpClient == false and DisposeHttpClient -%}
        using (client_)
        {
{%     endif -%}
{%     if UseHttpRequestMessageCreationMethod -%}
            using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
{%     else -%}
            using (var request_ = new HttpRequestMessage())
{%     endif -%}
            {
{%     for parameter in operation.HeaderParameters -%}
{%         if parameter.IsRequired -%}
                if ({{ parameter.VariableName }} == null) throw new ArgumentNullException("{{ parameter.VariableName }}");
                {% template Client.Class.HeaderParameter %}
{%         else -%}
                if ({{ parameter.VariableName }} != null)
                    {% template Client.Class.HeaderParameter %}
{%         endif -%}
{%     endfor -%}
{%     if operation.HasContent -%}
{%         if operation.HasBinaryBodyParameter -%}
                HttpContent content_ = new StreamContent({{ operation.ContentParameter.VariableName }});
{%         elseif operation.HasXmlBodyParameter -%}
                HttpContent content_ = new StringContent({{ operation.ContentParameter.VariableName }});
{%         else -%}
                HttpContent content_ = new StringContent(JsonConvert.SerializeObject({{ operation.ContentParameter.VariableName }}, {% if SerializeTypeInformation %}typeof({{ operation.ContentParameter.Type }}), {% endif %}_settings.Value));
{%         endif -%}
                content_.Headers.ContentType = MediaTypeHeaderValue.Parse("{{ operation.Consumes }}");
                request_.Content = content_;
{%     else -%}
{%         if operation.HasFormParameters -%}
{%             if operation.ConsumesFormUrlEncoded -%}
                var keyValues_ = new List<KeyValuePair<string, string>>();
{%                 for parameter in operation.FormParameters -%}
{%                     if parameter.IsNullable -%}
                if ({{ parameter.VariableName }} != null)
{%                     else -%}
                if ({{ parameter.VariableName }} == null)
                    throw new ArgumentNullException("{{ parameter.VariableName }}");
                else
{%                     endif -%}
                    keyValues_.Add(new KeyValuePair<string, string>("{{ parameter.Name }}", ConvertToString({{ parameter.VariableName }}, System.Globalization.CultureInfo.InvariantCulture)));
{%                 endfor -%}
                request_.Content = new FormUrlEncodedContent(keyValues_);
{%             else -%}
                var boundary_ = Guid.NewGuid().ToString();
                HttpContent content_ = new MultipartFormDataContent(boundary_);
                content_.Headers.Remove("Content-Type");
                content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
{%                 for parameter in operation.FormParameters -%}
{%                     if parameter.IsNullable -%}
                if ({{ parameter.VariableName }} != null)
{%                     else -%}
                if ({{ parameter.VariableName }} == null) throw new ArgumentNullException("{{ parameter.VariableName }}");
                else
{%                     endif -%}
                {
{%                     if parameter.IsFile -%}
{%                         if parameter.IsArray -%}
                    foreach (var item_ in {{ parameter.VariableName }})
                    {
                        var content_{{ parameter.VariableName }}_ = new StreamContent(item_.Data);
                        if (!string.IsNullOrEmpty(item_.ContentType))
                            content_{{ parameter.VariableName }}_.Headers.ContentType = MediaTypeHeaderValue.Parse(item_.ContentType);
                        content_.Add(content_{{ parameter.VariableName }}_, "{{ parameter.Name }}", item_.FileName ?? "{{ parameter.Name }}");
                    }
{%                         else -%}
                    HttpContent content_{{ parameter.VariableName }}_ = new StreamContent({{ parameter.VariableName }}.Data);
                    if (!string.IsNullOrEmpty({{ parameter.VariableName }}.ContentType))
                        content_{{ parameter.VariableName }}_.Headers.ContentType = MediaTypeHeaderValue.Parse({{ parameter.VariableName }}.ContentType);
                    content_.Add(content_{{ parameter.VariableName }}_, "{{ parameter.Name }}", {{ parameter.VariableName }}.FileName ?? "{{ parameter.Name }}");
{%                         endif -%}
{%                     else -%}
                    content_.Add(new StringContent(ConvertToString({{ parameter.VariableName }}, CultureInfo.InvariantCulture)), "{{ parameter.Name }}");
{%                     endif -%}
                }
{%                 endfor -%}
                request_.Content = content_;
{%         elseif operation.IsGetOrDeleteOrHead == false -%}
                request_.Content = new StringContent(String.Empty, Encoding.UTF8, "{{ operation.Produces }}");
{%         endif -%}
{%     endif -%}
                request_.Method = new HttpMethod("{{ operation.HttpMethodUpper | upcase }}");
{%     if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
                request_.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("{{ operation.Produces }}"));
{%     endif -%}

                PrepareRequest(client_, request_, urlBuilder_);
                String url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                {% template Client.Class.BeforeSend %}
                try // https://stackoverflow.com/questions/40677708/which-exceptions-can-httpclient-throw
                {
                    using (HttpResponseMessage response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false))
                    {
                        var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        Int32 status_ = (Int32)response_.StatusCode;
{%     for response in operation.Responses -%}
                        {% if forloop.first != true %}else {% endif %}if (status_ == {{ response.StatusCode }}{% if response.CheckChunkedStatusCode %} || status_ == 206{% endif %}) 
                        {
                            {% template Client.Class.ProcessResponse %}
                        }
{%     endfor -%}
{%     if operation.HasDefaultResponse -%}
{%         if operation.DefaultResponse.HasType -%}
                        {
{%             assign response = operation.DefaultResponse -%}
                            {% template Client.Class.ProcessResponse %}
                        }
{%         elseif operation.HasSuccessResponse -%}
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new {{ ExceptionClass }}("{{ operation.DefaultResponse.ExceptionDescription }}", reason: ClientExceptionReason.ExpectedError, (Int32)response_.StatusCode, responseData_, headers_, null);
                        }
{%         endif -%}
{%     else -%}
                        {% if operation.Responses.size > 0 %}else {% endif %}if (status_ >= 500 && status_ < 600)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ResponseDeserializationException("A HTTP server error status code was received (" + (Int32)response_.StatusCode + ").", reason: ClientExceptionReason.InternalServerError, (Int32)response_.StatusCode, responseData_, headers_, null);
                        }
                        {% if operation.Responses.size > 0 %}else {% endif %}if (status_ != 200 && status_ != 204)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ResponseDeserializationException("The HTTP status code of the response was not expected (" + (Int32)response_.StatusCode + ").", reason: ClientExceptionReason.UnexpectedHttpStatusCode, (Int32)response_.StatusCode, responseData_, headers_, null);
                        }
{%     endif -%}
{%     if operation.HasDefaultResponse == false or (operation.DefaultResponse.HasType == false and operation.HasSuccessResponse == false) -%}
{%         if operation.HasResultType -%}
{%             if operation.WrapResponse and operation.UnwrappedResultType != "FileResponse" -%}
                        return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>((Int32)response_.StatusCode, headers_, default({{ operation.UnwrappedResultType }})); 
{%             else -%}
                        return default({{ operation.UnwrappedResultType }});
{%             endif -%}
{%         elseif operation.WrapResponse -%}

                        return new {{ ResponseClass }}((Int32)response_.StatusCode, headers_); 
{%         endif -%}
{%     endif -%}
                    }
                }
                catch (TaskCanceledException taskEx)
                {
                    // https://stackoverflow.com/questions/12666922/distinguish-timeout-from-user-cancellation
                    throw new NSwagClientException("HTTP request timed-out or was canceled by the user.", reason: ClientExceptionReason.TimeoutOrCanceled, inner: taskEx);
                }
                catch (HttpRequestException httpEx)
                {
                    throw new NSwagClientException("HTTP request encountered a network error or unexpected response.", reason: ClientExceptionReason.HttpError, inner: httpEx);
                }
            }
        }
    }

{% endfor -%}
    {% template Client.Class.ConvertToString %}
}