protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string,System.Collections.Generic.IEnumerable<string>> responseHeadersAsDictionary)
{
#if NSWAG_STRING_RESPONSES // Define this symbol in your project properties to enable inspecting response bodies as strings.
    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
    try
    {
        var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, this.JsonSerializerSettings);
        return new ObjectResponseResult<T>(typedBody, responseText);
    }
    catch (Newtonsoft.Json.JsonException exception)
    {
        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
        throw new {{ ExceptionClass }}(message: message, (int)response.StatusCode, objectBodyAsString, responseHeadersAsDictionary, exception);
    }
#else
    try
    {
        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
        using (var streamReader = new System.IO.StreamReader(responseStream))
        using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
        {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(this.JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, null);
        }
    }
    catch (Newtonsoft.Json.JsonException exception)
    {
        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
        throw new {{ ExceptionClass }}(message: message, (int)response.StatusCode, null, responseHeadersAsDictionary, exception);
    }
#endif
}