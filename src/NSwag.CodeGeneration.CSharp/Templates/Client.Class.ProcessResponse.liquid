{% if response.HasType -%}
{%     if response.IsFile -%}
{%         if response.IsSuccess -%}
var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, {% if InjectHttpClient %}null{% else %}client_{% endif %}, response_); 
client_ = null; response_ = null; // response and client are disposed by FileResponse
return fileResponse_;
{%         else -%}
ObjectResponseResult<{{ response.Type }}> objectResponse_ = await this.ReadObjectResponseAsync<{{ response.Type }}>(response_, headers_).ConfigureAwait(false);
throw new {{ ExceptionClass }}("{{ response.ExceptionDescription }}", (int)response_.StatusCode, objectResponse_.ResponseText, headers_, objectResponse_.ResponseObject);
{%         endif -%}
{%     else -%}
ObjectResponseResult<{{ response.Type }}> objectResponse_ = await this.ReadObjectResponseAsync<{{ response.Type }}>(response_, headers_).ConfigureAwait(false);
{%         if response.IsSuccess -%}
{%             if operation.WrapResponse -%}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>((int)response_.StatusCode, headers_, responseText); 
{%             else -%}
return objectResponse_.ResponseObject; 
{%             endif -%}
{%         endif -%}
{%         if response.IsSuccess == false -%}
{%             if response.InheritsExceptionSchema -%}
if (result_ == null)
    result_ = new {{ response.Type }}();
result_.Data.Add("HttpStatus", status_);
result_.Data.Add("HttpHeaders", headers_);
result_.Data.Add("HttpResponse", responseText);
{%                 if WrapDtoExceptions -%}
throw new {{ ExceptionClass }}("{{ response.ExceptionDescription }}", (int)response_.StatusCode, objectResponse_.ResponseText, headers_, objectResponse_.ResponseObject);
{%                 else -%}
throw result_;
{%                 endif -%}
{%             else -%}
throw new {{ ExceptionClass }}("{{ response.ExceptionDescription }}", (int)response_.StatusCode, objectResponse_.ResponseText, headers_, objectResponse_.ResponseObject);
{%             endif -%}
{%         endif -%}
{%     endif -%}
{% elseif response.IsSuccess -%}
{%     if operation.HasResultType -%}
{%         if operation.WrapResponse -%}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>((int)response_.StatusCode, headers_, default({{ operation.UnwrappedResultType }})); 
{%         else -%}
return default({{ operation.UnwrappedResultType }});
{%         endif -%}
{%     else -%}
{%         if operation.WrapResponse -%}
return new {{ ResponseClass }}((int)response_.StatusCode, headers_); 
{%         else -%}
return;
{%         endif -%}
{%     endif -%}
{% else -%}{% comment %} implied: `if !response.HasType` so just read it as text {% endcomment %}
string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
throw new {{ ExceptionClass }}("{{ response.ExceptionDescription }}", (int)response_.StatusCode, responseText_, headers_, null);
{% endif -%}